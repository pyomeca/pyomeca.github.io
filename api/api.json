{
  "name": "pyomeca",
  "docstring": "<p>Base module</p>",
  "link": "/",
  "children": [
    {
      "name": "Analogs",
      "link": "/api/analogs/#pyomeca.analogs.Analogs",
      "children": [
        {
          "name": "from_c3d",
          "link": "/api/analogs/#pyomeca.analogs.Analogs.from_c3d",
          "value": 1,
          "docstring": "<p>Analogs DataArray from a c3d file.</p>  <p>To read <a href=\"https://github.com/romainmartinez/pyomeca/blob/master/tests/data/markers_analogs.c3d\">this c3d file</a>, type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./tests/data/markers_analogs.c3d\"</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_c3d</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">)</span>\n</code></pre> </div> <p>If you know the channel names, you can retrieve only the ones you are interested in:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Voltage.1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Voltage.2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Voltage.3\"</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_c3d</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">)</span>\n</code></pre> </div> <p>Sometimes the channel name is delimited by a suffix or prefix. To access the prefix, you can specify <code>prefix_delimiter</code> and <code>suffix_delimiter</code> for the suffix. For example, if the name is <code>\"Voltage.1\"</code> and you specify <code>suffix_delimiter=\".\"</code>, you will select \"Voltage\". Similarly, if you specify `prefix_delimiter=\".\":</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_c3d</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">,</span> <span class=\"n\">prefix_delimiter</span><span class=\"o\">=</span><span class=\"s2\">\".\"</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_csv",
          "link": "/api/analogs/#pyomeca.analogs.Analogs.from_csv",
          "value": 1,
          "docstring": "<p>Analogs DataArray from a csv file.</p>  <p>To read <a href=\"https://github.com/romainmartinez/pyomeca/blob/master/tests/data/analogs.csv\">this csv file</a>, type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./tests/data/analogs.csv\"</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre> </div> <p>If you know the channel names, you can retrieve only the ones you are interested in by specifying strings:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"IM EMG1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"IM EMG2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"IM EMG3\"</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>Or by position:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>Sometimes the channel name is delimited by a suffix or prefix. To access the prefix, you can specify <code>prefix_delimiter</code> and <code>suffix_delimiter</code> for the suffix. For example, if the name is <code>\"IM EMG1\"</code> and you specify <code>suffix_delimiter=\" \"</code>, you will select \"IM\". Similarly, if you specify `prefix_delimiter=\" \":</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"EMG1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"EMG2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"EMG3\"</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span>\n    <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">,</span>\n    <span class=\"n\">suffix_delimiter</span><span class=\"o\">=</span><span class=\"s2\">\" \"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>It is also possible to specify a column containing the time vector:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">time_column</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_excel",
          "link": "/api/analogs/#pyomeca.analogs.Analogs.from_excel",
          "value": 1,
          "docstring": "<p>Analogs DataArray from a excel file.</p>  <p>To read <a href=\"https://github.com/romainmartinez/pyomeca/blob/master/tests/data/analogs.xlsx\">this excel file</a>, type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./tests/data/analogs.xlsx\"</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_excel</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre> </div> <p>If you know the channel names, you can retrieve only the ones you are interested in by specifying strings:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"A\"</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_excel</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>Or by position:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_excel</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>It is also possible to specify a column containing the time vector:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_excel</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">time_column</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_mot",
          "link": "/api/analogs/#pyomeca.analogs.Analogs.from_mot",
          "value": 1,
          "docstring": "<p>Analogs DataArray from a mot file.</p>  <p>To read <a href=\"https://github.com/romainmartinez/pyomeca/blob/master/tests/data/inverse_kin.mot\">this mot file</a>, type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./tests/data/inverse_kin.mot\"</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_mot</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">)</span>\n</code></pre> </div> <p>If you know the channel names, you can retrieve only the ones you are interested in by specifying strings:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"elbow_flexion\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pro_sup\"</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_mot</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">)</span>\n</code></pre> </div> <p>Or by position:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_mot</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_random_data",
          "link": "/api/analogs/#pyomeca.analogs.Analogs.from_random_data",
          "value": 1,
          "docstring": "<p>Create random data from a specified distribution (normal by default) using random walk.</p>  <p>To instantiate an <code>Analogs</code> with some random data sampled from a normal distribution:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">n_channels</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">n_frames</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">n_channels</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">)</span>\n</code></pre> </div> <p>You can choose any distribution available in <a href=\"https://docs.scipy.org/doc/numpy-1.14.0/reference/routines.random.html#distributions\">numpy.random</a>:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">distribution</span><span class=\"o\">=</span><span class=\"s2\">\"uniform\"</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_sto",
          "link": "/api/analogs/#pyomeca.analogs.Analogs.from_sto",
          "value": 1,
          "docstring": "<p>Analogs DataArray from a sto file.</p>  <p>To read <a href=\"https://github.com/romainmartinez/pyomeca/blob/master/tests/data/inverse_dyn.sto\">this sto file</a>, type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./tests/data/inverse_dyn.sto\"</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_sto</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">)</span>\n</code></pre> </div> <p>If you know the channel names, you can retrieve only the ones you are interested in by specifying strings:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"shoulder_plane_moment\"</span><span class=\"p\">,</span> <span class=\"s2\">\"shoulder_ele_moment\"</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_sto</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">)</span>\n</code></pre> </div> <p>Or by position:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_sto</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">)</span>\n</code></pre> </div> "
        }
      ],
      "docstring": "<p>Analogs DataArray with <code>channel</code> and <code>time</code> dimensions used for generic signals such as EMGs, force signals or any other analog signals. <img class=\"center\"alt=\"analogs\" src=\"/images/objects/analogs.svg\"/></p>  <p>To instantiate an <code>Analogs</code> with 4 channels and 100 frames filled with some random data:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">n_channels</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">n_frames</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">n_channels</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"p\">))</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre> </div> <p>You can add the channel names:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"B\"</span><span class=\"p\">,</span> <span class=\"s2\">\"C\"</span><span class=\"p\">,</span> <span class=\"s2\">\"D\"</span><span class=\"p\">]</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"n\">names</span><span class=\"p\">)</span>\n</code></pre> </div> <p>And an associate time vector:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">rate</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>  <span class=\"c1\"># Hz</span>\n<span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"n\">n_frames</span> <span class=\"o\">/</span> <span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">rate</span><span class=\"p\">)</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"p\">)</span>\n</code></pre> </div> "
    },
    {
      "name": "Angles",
      "link": "/api/angles/#pyomeca.angles.Angles",
      "children": [
        {
          "name": "from_random_data",
          "link": "/api/angles/#pyomeca.angles.Angles.from_random_data",
          "value": 1,
          "docstring": "<p>Create random data from a specified distribution (normal by default) using random walk.</p>  <p>To instantiate an <code>Angles</code> with some random data sampled from a normal distribution:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Angles</span>\n\n<span class=\"n\">n_frames</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span>\n<span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">)</span>\n</code></pre> </div> <p>You can choose any distribution available in <a href=\"https://docs.scipy.org/doc/numpy-1.14.0/reference/routines.random.html#distributions\">numpy.random</a>:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">distribution</span><span class=\"o\">=</span><span class=\"s2\">\"uniform\"</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_rototrans",
          "link": "/api/angles/#pyomeca.angles.Angles.from_rototrans",
          "value": 1,
          "docstring": "<p>Angles DataArray from a rototranslation matrix and specified angle sequence.</p>  <p>To get the euler angles from a random rototranslation matrix with a given angle sequence type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Angles</span><span class=\"p\">,</span> <span class=\"n\">Rototrans</span>\n\n<span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"n\">angles_sequence</span> <span class=\"o\">=</span> <span class=\"s2\">\"xyz\"</span>\n\n<span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"o\">.</span><span class=\"n\">from_rototrans</span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">,</span> <span class=\"n\">angles_sequence</span><span class=\"p\">)</span>\n</code></pre> </div> "
        }
      ],
      "docstring": "<p>Angles DataArray with <code>axis</code>, <code>channel</code> and <code>time</code> dimensions used for joint angles. <img class=\"center\"alt=\"angles\" src=\"/images/objects/angles.svg\"/></p>  <p>To instantiate an <code>Angles</code> 4 by 4 and 100 frames filled with some random data:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Angles</span>\n\n<span class=\"n\">n_axis</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">n_channel</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">n_frames</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">n_axis</span><span class=\"p\">,</span> <span class=\"n\">n_channel</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"p\">))</span>\n<span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre> </div> <p>You can an associate time vector:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">rate</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>  <span class=\"c1\"># Hz</span>\n<span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"n\">n_frames</span> <span class=\"o\">/</span> <span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">rate</span><span class=\"p\">)</span>\n<span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"p\">)</span>\n</code></pre> </div> "
    },
    {
      "name": "DataArrayAccessor",
      "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor",
      "children": [
        {
          "name": "abs",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.abs",
          "value": 1,
          "docstring": "<p>Calculate the absolute value element-wise.</p>  <p>To compute the absolute value of any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span>\n</code></pre> </div> "
        },
        {
          "name": "band_pass",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.band_pass",
          "value": 1,
          "docstring": "<p>Band-pass Butterworth filter.</p>  <p>To band-pass any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans) signal at 10-200Hz:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">fake_emg</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"p\">(</span><span class=\"n\">fake_emg</span><span class=\"p\">)</span>\n<span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>  <span class=\"c1\"># Hz</span>\n<span class=\"n\">band_pass</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">band_pass</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">])</span>\n\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"raw\"</span><span class=\"p\">)</span>\n<span class=\"n\">band_pass</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"band-pass @ 10-200Hz\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre> </div> <p><img class=\"center\"alt=\"band_pass\" src=\"/images/api/band_pass.svg\"/></p> "
        },
        {
          "name": "band_stop",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.band_stop",
          "value": 1,
          "docstring": "<p>Band-stop Butterworth filter.</p>  <p>To band-stop any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans) signal at 40-60Hz:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">fake_emg</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"p\">(</span><span class=\"n\">fake_emg</span><span class=\"p\">)</span>\n<span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>  <span class=\"c1\"># Hz</span>\n<span class=\"n\">band_stop</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">band_stop</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">])</span>\n\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"raw\"</span><span class=\"p\">)</span>\n<span class=\"n\">band_stop</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"band-stop @ 40-60Hz\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre> </div> <p><img class=\"center\"alt=\"band_stop\" src=\"/images/api/band_stop.svg\"/></p> "
        },
        {
          "name": "center",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.center",
          "value": 1,
          "docstring": "<p>Center an array (i.e., subtract the mean).</p>  <p>To center any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">random_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"p\">(</span><span class=\"n\">random_data</span><span class=\"p\">)</span>\n<span class=\"n\">centered</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">center</span><span class=\"p\">()</span>\n</code></pre> </div> <p>This will substract the mean of the signal by default. The previous random signal was sampled from a uniform distribution from 2 and 4 (mean around 3). When centered, the signal is now center around 0 (mean around 0).</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"raw\"</span><span class=\"p\">)</span>\n<span class=\"n\">centered</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"centered\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre> </div> <p><img class=\"center\"alt=\"center\" src=\"/images/api/center.svg\"/></p> "
        },
        {
          "name": "detect_onset",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.detect_onset",
          "value": 1,
          "docstring": "<p>Detects onset based on amplitude threshold.</p>  <p>To detect the onsets of any <strong>one-dimensional</strong> <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">scipy.signal</span> <span class=\"k\">as</span> <span class=\"nn\">sig</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"c1\"># simulate fake ecg data</span>\n<span class=\"n\">rr</span> <span class=\"o\">=</span> <span class=\"mf\">2.5</span>  <span class=\"c1\"># rr time in seconds</span>\n<span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>  <span class=\"c1\"># sampling rate</span>\n<span class=\"n\">pqrst</span> <span class=\"o\">=</span> <span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">resample</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">wavelets</span><span class=\"o\">.</span><span class=\"n\">daub</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">rr</span> <span class=\"o\">*</span> <span class=\"n\">freq</span><span class=\"p\">))</span>\n<span class=\"n\">ecg</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">pqrst</span><span class=\"p\">,</span> <span class=\"n\">pqrst</span><span class=\"p\">,</span> <span class=\"n\">pqrst</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"p\">(</span><span class=\"n\">ecg</span><span class=\"p\">)</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n\n<span class=\"n\">onsets</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">sel</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">detect_onset</span><span class=\"p\">(</span>\n    <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(),</span>  <span class=\"c1\"># mean of the signal</span>\n    <span class=\"n\">n_above</span><span class=\"o\">=</span><span class=\"n\">freq</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span>  <span class=\"c1\"># we want at least 1/2 second above the threshold</span>\n    <span class=\"n\">n_below</span><span class=\"o\">=</span><span class=\"n\">freq</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span>  <span class=\"c1\"># we accept point below threshold for 1/2 second</span>\n<span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">onsets</span><span class=\"p\">:</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axvline</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"g\"</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axvline</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"r\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre> </div> <p><img class=\"center\"alt=\"detect_onset\" src=\"/images/api/detect_onset.svg\"/></p> "
        },
        {
          "name": "detect_outliers",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.detect_outliers",
          "value": 1,
          "docstring": "<p>Detects data points that are <code>threshold</code> times the standard deviation from the mean.</p>  <p>To get a boolean <code>xr.DataArray</code> containing the data that are 3 times the mean +/- standard deviation:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">outliers</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">detect_outliers</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre> </div> <p>Let's plot the data that are 1 time the mean +/- standard deviation on an analog vector:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">outliers</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">detect_outliers</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"n\">threshold</span><span class=\"p\">)</span>\n\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">\"time\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"black\"</span><span class=\"p\">,</span> <span class=\"n\">add_legend</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">outliers</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span>\n    <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">\"time\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"red\"</span><span class=\"p\">,</span> <span class=\"n\">add_legend</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s2\">\"o\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"outliers\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">mu</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"n\">sigma</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axhline</span><span class=\"p\">(</span><span class=\"n\">mu</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"grey\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">axhspan</span><span class=\"p\">(</span>\n    <span class=\"n\">mu</span> <span class=\"o\">-</span> <span class=\"n\">threshold</span> <span class=\"o\">*</span> <span class=\"n\">sigma</span><span class=\"p\">,</span>\n    <span class=\"n\">mu</span> <span class=\"o\">+</span> <span class=\"n\">threshold</span> <span class=\"o\">*</span> <span class=\"n\">sigma</span><span class=\"p\">,</span>\n    <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"grey\"</span><span class=\"p\">,</span>\n    <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">\"mean +/- </span><span class=\"si\">{</span><span class=\"n\">threshold</span><span class=\"si\">}</span><span class=\"s2\"> std\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre> </div> <p><img class=\"center\"alt=\"detect_outliers\" src=\"/images/api/detect_outliers.svg\"/></p> "
        },
        {
          "name": "fft",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.fft",
          "value": 1,
          "docstring": "<p>Performs a discrete Fourier Transform and return a DataArray with the corresponding amplitudes and frequencies.</p>  <p>Let's compare the resulting fft on a raw and low-passed signal:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"c1\"># generate fake data</span>\n<span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">time</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mf\">0.1</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">analogs_low_passed</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">low_pass</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># compute fft on raw and low-passed signal</span>\n<span class=\"n\">fft_raw</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"n\">freq</span><span class=\"p\">)</span>\n<span class=\"n\">fft_low_passed</span> <span class=\"o\">=</span> <span class=\"n\">analogs_low_passed</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"n\">freq</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">ncols</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># plot signal vs. time</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">\"time\"</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"black\"</span><span class=\"p\">,</span> <span class=\"n\">add_legend</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">analogs_low_passed</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">\"time\"</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"red\"</span><span class=\"p\">,</span> <span class=\"n\">add_legend</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s2\">\"Signal vs. Time\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># plot amplitudes vs. frequencies</span>\n<span class=\"n\">fft_raw</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">\"freq\"</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"black\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"raw\"</span><span class=\"p\">)</span>\n<span class=\"n\">fft_low_passed</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">\"freq\"</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"red\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"low-pass @ 5Hz\"</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s2\">\"Amplitudes vs. Freq\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre> </div> <p><img class=\"center\"alt=\"fft\" src=\"/images/api/fft.svg\"/></p> "
        },
        {
          "name": "high_pass",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.high_pass",
          "value": 1,
          "docstring": "<p>High-pass Butterworth filter.</p>  <p>To high-pass any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans) signal at 100Hz:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">fake_emg</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"n\">low</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"p\">(</span><span class=\"n\">fake_emg</span><span class=\"p\">)</span>\n<span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>  <span class=\"c1\"># Hz</span>\n<span class=\"n\">high_pass</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">high_pass</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"raw\"</span><span class=\"p\">)</span>\n<span class=\"n\">high_pass</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"high-pass @ 100Hz\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre> </div> <p><img class=\"center\"alt=\"high_pass\" src=\"/images/api/high_pass.svg\"/></p> "
        },
        {
          "name": "low_pass",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.low_pass",
          "value": 1,
          "docstring": "<p>Low-pass Butterworth filter.</p>  <p>To low-pass any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans) signal at 5Hz:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">low_pass</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre> </div> <p>Let's see how the low-pass smooth a fake sinusoidal signal:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># generate fake data</span>\n<span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>  <span class=\"c1\"># Hz</span>\n<span class=\"n\">time_vector</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"mi\">1</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">time_vector</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mf\">0.1</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">time_vector</span><span class=\"p\">)</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">low_pass</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">low_pass</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"raw\"</span><span class=\"p\">)</span>\n<span class=\"n\">low_pass</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"low-pass @ 5Hz\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre> </div> <p><img class=\"center\"alt=\"low_pass\" src=\"/images/api/low_pass.svg\"/></p> "
        },
        {
          "name": "matmul",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.matmul",
          "value": 1,
          "docstring": "<p>Matrix product of two arrays.</p>  <p>To compute the matrix product of two <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">first_analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">second_analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n\n<span class=\"n\">first_analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">matmul</span><span class=\"p\">(</span><span class=\"n\">second_analogs</span><span class=\"p\">)</span>\n</code></pre> </div> <p>You can also use the shorthand <code>@</code>:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">first_analogs</span> <span class=\"o\">@</span> <span class=\"n\">second_analogs</span>\n</code></pre> </div> "
        },
        {
          "name": "norm",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.norm",
          "value": 1,
          "docstring": "<p>Return the norm of an array.</p>  <p>To compute the norm of any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans) along a given dimension:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Markers</span>\n\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">markers</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"s2\">\"axis\"</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "normalize",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.normalize",
          "value": 1,
          "docstring": "<p>Normalize a signal against <code>ref</code> on a scale of <code>scale</code>.</p>  <p>To normalize any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span>\n<span class=\"n\">normalized</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">()</span>\n\n<span class=\"n\">normalized</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre> </div> <p><img class=\"center\"alt=\"normalize\" src=\"/images/api/normalize.svg\"/></p> <p>By default, this function normalize against the signal's max. To specify any other value, use the <code>ref</code> parameter:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">normalized</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">ref</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "rms",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.rms",
          "value": 1,
          "docstring": "<p>Return the root-mean-square of an array.</p>  <p>To compute the root-mean-square of any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">rms</span><span class=\"p\">()</span>\n</code></pre> </div> "
        },
        {
          "name": "sqrt",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.sqrt",
          "value": 1,
          "docstring": "<p>Return the non-negative square-root of an array, element-wise.</p>  <p>To compute the non-negative square-root of any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">()</span>\n</code></pre> </div> "
        },
        {
          "name": "square",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.square",
          "value": 1,
          "docstring": "<p>Return the element-wise square of the input.</p>  <p>To compute the element-wise square of any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">()</span>\n</code></pre> </div> "
        },
        {
          "name": "time_normalize",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.time_normalize",
          "value": 1,
          "docstring": "<p>Time normalization used for temporal alignment of data.</p>  <p>To time-normalize any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">847</span><span class=\"p\">))</span>\n<span class=\"n\">time_normalized</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">time_normalize</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">time_normalized</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>  <span class=\"c1\"># 100</span>\n</code></pre> </div> <p>To normalize the corresponding time dimension from 0 to 100%, specify <code>norm_time=True</code>:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">time_normalized</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">time_normalize</span><span class=\"p\">(</span><span class=\"n\">norm_time</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">time_normalized</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre> </div> <p><img class=\"center\"alt=\"time_normalize\" src=\"/images/api/time_normalize.svg\"/></p> <p>By default, <code>time_normalize</code> use a time vector with 100 frames from 0 to 100. However, you can specify the desired number of frames:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">time_normalized</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">time_normalize</span><span class=\"p\">(</span><span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">time_normalized</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>  <span class=\"c1\"># 500</span>\n</code></pre> </div> <p>You can also specify the desired time_vector directly in the <code>time_vector</code> parameter:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">time_normalized</span> <span class=\"o\">=</span> <span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">time_normalize</span><span class=\"p\">(</span><span class=\"n\">time_vector</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">))</span>\n</code></pre> </div> "
        },
        {
          "name": "to_csv",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.to_csv",
          "value": 1,
          "docstring": "<p>Write a csv file from a xarray.DataArray.</p>  <p>To write a csv file from any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"temp.csv\"</span><span class=\"p\">)</span>\n</code></pre> </div> <p>By default, <code>to_csv</code> will export the data in a \"wide\" format (1 column by channel). You can also export the data in a \"tidy\" format with <code>wide=False</code>:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"temp.csv\"</span><span class=\"p\">,</span> <span class=\"n\">wide</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "to_matlab",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.to_matlab",
          "value": 1,
          "docstring": "<p>Write a matlab file from a xarray.DataArray.</p>  <p>To write a matlab file from any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">to_matlab</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"temp.mat\"</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "to_wide_dataframe",
          "link": "/api/dataarray_accessor/#pyomeca.dataarray_accessor.DataArrayAccessor.to_wide_dataframe",
          "value": 1,
          "docstring": "<p>Return a wide pandas.DataFrame (one column by channel).</p>  <p>To return a dataframe from any <code>xarray.DataArray</code> (including Analogs, Angles, Markers or Rototrans):</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Analogs</span>\n\n<span class=\"n\">analogs</span> <span class=\"o\">=</span> <span class=\"n\">Analogs</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n<span class=\"n\">analogs</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">to_wide_dataframe</span><span class=\"p\">()</span>\n</code></pre> </div> "
        }
      ],
      "docstring": "<p>Meca DataArray accessor used for processing or file writing.</p>"
    },
    {
      "name": "Markers",
      "link": "/api/markers/#pyomeca.markers.Markers",
      "children": [
        {
          "name": "from_c3d",
          "link": "/api/markers/#pyomeca.markers.Markers.from_c3d",
          "value": 1,
          "docstring": "<p>Markers DataArray from a c3d file.</p>  <p>To read <a href=\"https://github.com/romainmartinez/pyomeca/blob/master/tests/data/markers_analogs.c3d\">this c3d file</a>, type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Markers</span>\n\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./tests/data/markers_analogs.c3d\"</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_c3d</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">)</span>\n</code></pre> </div> <p>If you know the channel names, you can retrieve only the ones you are interested in:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Daphnee:ASISl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Daphnee:PSISr\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Daphnee:PSISl\"</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_c3d</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">)</span>\n</code></pre> </div> <p>Sometimes the channel name is delimited by a suffix or prefix. To access the prefix, you can specify <code>prefix_delimiter</code> and <code>suffix_delimiter</code> for the suffix. For example, if the name is <code>\"\"Daphnee:ASISl\"</code> and you specify <code>suffix_delimiter=\":\"</code>, you will select \"Daphnee\". Similarly, if you specify `prefix_delimiter=\":\":</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"ASISl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PSISr\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PSISl\"</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_c3d</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">prefix_delimiter</span><span class=\"o\">=</span><span class=\"s2\">\":\"</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_csv",
          "link": "/api/markers/#pyomeca.markers.Markers.from_csv",
          "value": 1,
          "docstring": "<p>Markers DataArray from a csv file.</p>  <p>To read <a href=\"https://github.com/romainmartinez/pyomeca/blob/master/tests/data/markers.csv\">this csv file</a>, type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Markers</span>\n\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./tests/data/markers.csv\"</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre> </div> <p>If you know the channel names, you can retrieve only the ones you are interested in by specifying strings:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Daphnee:ASISr\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Daphnee:ASISl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Daphnee:PSISr\"</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>Or by position:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>Sometimes the channel name is delimited by a suffix or prefix. To access the prefix, you can specify <code>prefix_delimiter</code> and <code>suffix_delimiter</code> for the suffix. For example, if the name is <code>\"Daphnee:ASISr\"</code> and you specify <code>suffix_delimiter=\":\"</code>, you will select \"Daphnee\". Similarly, if you specify `prefix_delimiter=\":\":</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"ASISr\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ASISl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PSISr\"</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span>\n    <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">,</span>\n    <span class=\"n\">prefix_delimiter</span><span class=\"o\">=</span><span class=\"s2\">\":\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>It is also possible to specify a column containing the time vector:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_csv</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">time_column</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_excel",
          "link": "/api/markers/#pyomeca.markers.Markers.from_excel",
          "value": 1,
          "docstring": "<p>Markers DataArray from an Excel file.</p>  <p>To read <a href=\"https://github.com/romainmartinez/pyomeca/blob/master/tests/data/markers.xlsx\">this excel file</a>, type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Markers</span>\n\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./tests/data/markers.xlsx\"</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_excel</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre> </div> <p>If you know the channel names, you can retrieve only the ones you are interested in by specifying strings:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"boite:gauche_ext\"</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_excel</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>Or by position:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_excel</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>Sometimes the channel name is delimited by a suffix or prefix. To access the prefix, you can specify <code>prefix_delimiter</code> and <code>suffix_delimiter</code> for the suffix. For example, if the name is <code>\"boite:gauche_ext\"</code> and you specify <code>suffix_delimiter=\":\"</code>, you will select \"boite\". Similarly, if you specify `prefix_delimiter=\":\":</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"gauche_ext\"</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_excel</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span>\n    <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">,</span>\n    <span class=\"n\">prefix_delimiter</span><span class=\"o\">=</span><span class=\"s2\">\":\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre> </div> <p>It is also possible to specify a column containing the time vector:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_excel</span><span class=\"p\">(</span>\n    <span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">first_row</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">first_column</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">time_column</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_random_data",
          "link": "/api/markers/#pyomeca.markers.Markers.from_random_data",
          "value": 1,
          "docstring": "<p>Create random data from a specified distribution (normal by default) using random walk.</p>  <p>To instantiate a <code>Markers</code> with some random data sampled from a normal distribution:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Markers</span>\n\n<span class=\"n\">n_axis</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">n_channels</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">n_frames</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">n_axis</span><span class=\"p\">,</span> <span class=\"n\">n_channels</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">)</span>\n</code></pre> </div> <p>You can choose any distribution available in <a href=\"https://docs.scipy.org/doc/numpy-1.14.0/reference/routines.random.html#distributions\">numpy.random</a>:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">distribution</span><span class=\"o\">=</span><span class=\"s2\">\"uniform\"</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_rototrans",
          "link": "/api/markers/#pyomeca.markers.Markers.from_rototrans",
          "value": 1,
          "docstring": "<p>Rotates markers data from a rototrans matrix.</p>  <p>To rotate a random markers set from random angles:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Angles</span><span class=\"p\">,</span> <span class=\"n\">Rototrans</span><span class=\"p\">,</span> <span class=\"n\">Markers</span>\n\n<span class=\"n\">n_frames</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">n_markers</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"p\">))</span>\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_euler_angles</span><span class=\"p\">(</span><span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"s2\">\"xyz\"</span><span class=\"p\">)</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">n_markers</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"p\">))</span>\n\n<span class=\"n\">rotated_markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_rototrans</span><span class=\"p\">(</span><span class=\"n\">markers</span><span class=\"p\">,</span> <span class=\"n\">rt</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_trc",
          "link": "/api/markers/#pyomeca.markers.Markers.from_trc",
          "value": 1,
          "docstring": "<p>Markers DataArray from a trc file.</p>  <p>To read <a href=\"https://github.com/romainmartinez/pyomeca/blob/master/tests/data/markers.trc\">this trc file</a>, type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Markers</span>\n\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./tests/data/markers.trc\"</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_trc</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">)</span>\n</code></pre> </div> <p>If you know the channel names, you can retrieve only the ones you are interested in by specifying strings:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"STER\"</span><span class=\"p\">,</span> <span class=\"s2\">\"STERl\"</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_trc</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">)</span>\n</code></pre> </div> <p>Or by position:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_trc</span><span class=\"p\">(</span><span class=\"n\">data_path</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">)</span>\n</code></pre> </div> "
        }
      ],
      "docstring": "<p>Markers DataArray with <code>axis</code>, <code>channel</code> and <code>time</code> dimensions used for skin marker positions. <img class=\"center\"alt=\"markers\" src=\"/images/objects/markers.svg\"/></p>  <p>To instantiate a <code>Markers</code> with 4 channels and 100 frames filled with some random data:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Markers</span>\n\n<span class=\"n\">n_axis</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">n_channels</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">n_frames</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">n_axis</span><span class=\"p\">,</span> <span class=\"n\">n_channels</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"p\">))</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre> </div> <p>You can add the channel names:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"B\"</span><span class=\"p\">,</span> <span class=\"s2\">\"C\"</span><span class=\"p\">,</span> <span class=\"s2\">\"D\"</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"n\">names</span><span class=\"p\">)</span>\n</code></pre> </div> <p>And an associate time vector:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">rate</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>  <span class=\"c1\"># Hz</span>\n<span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"n\">n_frames</span> <span class=\"o\">/</span> <span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">rate</span><span class=\"p\">)</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"p\">)</span>\n</code></pre> </div> "
    },
    {
      "name": "Rototrans",
      "link": "/api/rototrans/#pyomeca.rototrans.Rototrans",
      "children": [
        {
          "name": "from_averaged_rototrans",
          "link": "/api/rototrans/#pyomeca.rototrans.Rototrans.from_averaged_rototrans",
          "value": 1,
          "docstring": "<p>Rototrans DataArray from an averaged Rototrans.</p>  <p>To average a <code>Rototrans</code> computed from random angles:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Angles</span><span class=\"p\">,</span> <span class=\"n\">Rototrans</span>\n\n<span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"s2\">\"xyz\"</span>\n\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_euler_angles</span><span class=\"p\">(</span><span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">seq</span><span class=\"p\">)</span>\n<span class=\"n\">rt_mean</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_averaged_rototrans</span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">)</span>\n</code></pre> </div> <p>Let's make sure the resulting angles are roughly equivalent to the averaged angles:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">angles_mean</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"o\">.</span><span class=\"n\">from_rototrans</span><span class=\"p\">(</span><span class=\"n\">rt_mean</span><span class=\"p\">,</span> <span class=\"n\">seq</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isel</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">angles_mean_ref</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"o\">.</span><span class=\"n\">from_rototrans</span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">,</span> <span class=\"n\">seq</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"s2\">\"time\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">angles_mean</span> <span class=\"o\">-</span> <span class=\"n\">angles_mean_ref</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">meca</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_euler_angles",
          "link": "/api/rototrans/#pyomeca.rototrans.Rototrans.from_euler_angles",
          "value": 1,
          "docstring": "<p>Rototrans DataArray from euler angles and specified angle sequence.</p>  <p>To get the rototranslation matrix from random euler angles with a given angle sequence type:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Angles</span><span class=\"p\">,</span> <span class=\"n\">Rototrans</span>\n\n<span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"n\">angles_sequence</span> <span class=\"o\">=</span> <span class=\"s2\">\"xyz\"</span>\n\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_euler_angles</span><span class=\"p\">(</span><span class=\"n\">angles</span><span class=\"o\">=</span><span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">angle_sequence</span><span class=\"o\">=</span><span class=\"n\">angles_sequence</span><span class=\"p\">)</span>\n</code></pre> </div> <p>A translation vector can also be specified:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">translation</span> <span class=\"o\">=</span> <span class=\"n\">Angles</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_euler_angles</span><span class=\"p\">(</span>\n    <span class=\"n\">angles</span><span class=\"o\">=</span><span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">angle_sequence</span><span class=\"o\">=</span><span class=\"n\">angles_sequence</span><span class=\"p\">,</span> <span class=\"n\">translations</span><span class=\"o\">=</span><span class=\"n\">translation</span>\n<span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_markers",
          "link": "/api/rototrans/#pyomeca.rototrans.Rototrans.from_markers",
          "value": 1,
          "docstring": "<p>Rototrans DataArray from a specified set of markers.</p>  <p>To create a system of axes from random markers:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Markers</span><span class=\"p\">,</span> <span class=\"n\">Rototrans</span>\n\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">Markers</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_markers</span><span class=\"p\">(</span>\n    <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"n\">markers</span><span class=\"o\">.</span><span class=\"n\">isel</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span>  <span class=\"c1\"># first marker</span>\n    <span class=\"n\">axis_1</span><span class=\"o\">=</span><span class=\"n\">markers</span><span class=\"o\">.</span><span class=\"n\">isel</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]),</span>  <span class=\"c1\"># vector from the first and second markers</span>\n    <span class=\"n\">axis_2</span><span class=\"o\">=</span><span class=\"n\">markers</span><span class=\"o\">.</span><span class=\"n\">isel</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]),</span>  <span class=\"c1\"># vector from the first and third markers</span>\n    <span class=\"n\">axes_name</span><span class=\"o\">=</span><span class=\"s2\">\"xy\"</span><span class=\"p\">,</span>  <span class=\"c1\"># axis_1 is x and axis_2 is y</span>\n    <span class=\"n\">axis_to_recalculate</span><span class=\"o\">=</span><span class=\"s2\">\"y\"</span><span class=\"p\">,</span>  <span class=\"c1\"># we want to recalculate y</span>\n<span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_random_data",
          "link": "/api/rototrans/#pyomeca.rototrans.Rototrans.from_random_data",
          "value": 1,
          "docstring": "<p>Create random data from a specified distribution (normal by default) using random walk.</p>  <p>To instantiate a <code>Rototrans</code> with some random data sampled from a normal distribution:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Rototrans</span>\n\n<span class=\"n\">n_frames</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span>\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">)</span>\n</code></pre> </div> <p>You can choose any distribution available in <a href=\"https://docs.scipy.org/doc/numpy-1.14.0/reference/routines.random.html#distributions\">numpy.random</a>:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">(</span><span class=\"n\">distribution</span><span class=\"o\">=</span><span class=\"s2\">\"uniform\"</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre> </div> "
        },
        {
          "name": "from_transposed_rototrans",
          "link": "/api/rototrans/#pyomeca.rototrans.Rototrans.from_transposed_rototrans",
          "value": 1,
          "docstring": "<p>Rototrans DataArray from a tranposed Rototrans.</p>  <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Rototrans</span>\n\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_random_data</span><span class=\"p\">()</span>\n\n<span class=\"n\">rt_t</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"o\">.</span><span class=\"n\">from_transposed_rototrans</span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">)</span>\n</code></pre> </div> "
        }
      ],
      "docstring": "<p>Rototrans DataArray with <code>row</code>, <code>col</code> and <code>time</code> dimensions used for rototranslation matrix. <img class=\"center\"alt=\"rototrans\" src=\"/images/objects/rototrans.svg\"/></p>  <p>To instantiate a <code>Rototrans</code> 4 by 4 and 100 frames filled with some random data:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyomeca</span> <span class=\"kn\">import</span> <span class=\"n\">Rototrans</span>\n\n<span class=\"n\">n_row</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">n_col</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">n_frames</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">n_row</span><span class=\"p\">,</span> <span class=\"n\">n_col</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"p\">))</span>\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre> </div> <p>You can an associate time vector:</p> <div class=\"highlight\"> <pre><span></span><code><span class=\"n\">rate</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>  <span class=\"c1\"># Hz</span>\n<span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"n\">n_frames</span> <span class=\"o\">/</span> <span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">rate</span><span class=\"p\">)</span>\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">Rototrans</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"p\">)</span>\n</code></pre> </div> "
    }
  ]
}